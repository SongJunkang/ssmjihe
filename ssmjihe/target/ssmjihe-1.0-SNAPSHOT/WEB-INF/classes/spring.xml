<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


<!--    扫描组件（除去控制层）,用注解的方式进行扫描，然后加上全类名-->
    <context:component-scan base-package="com.atguigu.ssm">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


<!-- 配置数据源-->

    <!--    引入jdbc.properties,之后通过${key},访问value-->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!--        选择set注入-->
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>
<!--配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
<!--        要想管理事务，肯定是需要基于我们的连接对象来操作的，我们的连接对象是交给我们的数据源来管理的-->

    <property name="dataSource" ref="dataSource"></property>
    </bean>
<!--    开启事务的注解驱动。
        将使用注解@Transactional标识的方法或类中所有的方法进行事务管理。

-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

<!--  配置sqlSessionFactoryBean,可以直接在spring的ioc中获取sqlSessionFactory对象-->
<!--    工厂bean，特殊之处：当我们把sqlSessionFactoryBean 配置到当前的ioc容器后，然后我们可以直接来获取这个
工厂bean所提供的对象，而不是我们当前这个FactoryBean本身的对象。-->

    <bean class="org.mybatis.spring.SqlSessionFactoryBean">

<!--        设置mybatis的核心配置文件。-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>

<!--        设置数据源-->
        <property name="dataSource" ref="dataSource"></property>
<!--        设置类型别名，所对应的包-->
        <property name="typeAliasesPackage" value="com.atguigu.ssm.pojo"></property>

<!--        设置映射文件的路径，只有映射文件的包和mapper接口的包不一致时才需要设置。-->
<!--        <property name="mapperLocations" value="classpath:mappers/*.xml"></property>-->

<!--        配置分页插件，这个有点困难，就可以在mybatis配置文件中设置，-->
<!--        <property name="plugins">-->
<!--            <array>-->
<!--                <bean class="com.github.pagehelper.PageInterceptor"></bean>-->
<!--            </array>-->
<!--        </property>-->
    </bean>

<!--   可以把包下面的所有接口实现所有的代理实现类对象，然后把它交给ioc容器来进行管理-->
<!--    配置mapper接口的扫描，可以将指定包下所有的mapper接口，通过sqlsession 创建实现类对象，-->
<!--    此即设置了mapper接口所在的包，又配置了映射文件所在的包-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.atguigu.ssm.mapper"></property>
    </bean>

</beans>